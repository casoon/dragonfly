/*
 * Button
 *
 * Standardized buttons with variants and states.
 */

/**
 * Component Documentation
 * 
 * Interactive buttons for user actions and form control.
 * Buttons are the primary interactive elements of the user interface.
 * 
 * @layer: components
 * 
 * Compatibility:
 * - Full support in modern browsers
 * - Fallbacks for older browsers without container queries
 * - Fallbacks for browsers without CSS variables
 * - Accessible focus states and keyboard navigation
 * 
 * Basic usage:
 * <button class="button">Standard Button</button>
 * 
 * Variants:
 * <button class="button button--primary">Primary</button>
 * <button class="button button--secondary">Secondary</button>
 * <button class="button button--tertiary">Tertiary</button>
 * <button class="button button--success">Success</button>
 * <button class="button button--warning">Warning</button>
 * <button class="button button--danger">Danger</button>
 * <button class="button button--info">Info</button>
 * <button class="button button--link">Link Style</button>
 * 
 * Sizes:
 * <button class="button button--primary button--xs">Extra Small</button>
 * <button class="button button--primary button--sm">Small</button>
 * <button class="button button--primary button--md">Medium (Default)</button>
 * <button class="button button--primary button--lg">Large</button>
 * <button class="button button--primary button--xl">Extra Large</button>
 * 
 * States:
 * <button class="button button--primary" disabled>Disabled</button>
 * <button class="button button--primary button--loading">Loading...</button>
 * 
 * With Icon:
 * <button class="button button--primary button--with-icon">
 *   <span class="icon"><!-- Icon here --></span>
 *   <span>Button with Icon</span>
 * </button>
 * 
 * Icon Only:
 * <button class="button button--primary button--icon-only">
 *   <span class="icon"><!-- Icon here --></span>
 * </button>
 * 
 * Fluid scaling button (uses interpolate-size):
 * <button class="button button--primary button--fluid">Adaptive Button</button>
 */

/* Animations - defined outside @layer */
@keyframes spin {
  from { transform: rotate(0deg); }

  to { transform: rotate(360deg); }
}

/* Component Styles */
@layer components {
  /* Base Button Style */
  .button {
    align-items: center;
    border: none;
    border-radius: var(--radius-md, 0.5rem); /* Fallback added */
    cursor: pointer;
    display: inline-flex;
    font-size: var(--font-size-sm, 0.875rem); /* Fallback added */
    font-weight: var(--font-weight-medium, 500); /* Fallback added */
    justify-content: center;
    line-height: 1.25;
    padding-block: var(--space-2, 0.5rem); /* Fallback added */
    padding-inline: var(--space-4, 1rem); /* Fallback added */
    position: relative;
    text-decoration: none;
    transition: background-color var(--transition-duration-fast, 150ms) var(--transition-timing-ease, cubic-bezier(0.4, 0, 0.2, 1)); /* Fallback added */
  }

  /* Variants */
  .button--primary { /* Direct fallback for older browsers */
    background-color: var(--color-primary, #06c);
    color: white;
  }
  
  .button--primary:hover { /* Direct fallback for older browsers */
    background-color: var(--color-primary-hover, #05a);
  }

  .button--secondary {
    background-color: var(--color-secondary);
    color: white;
  }
  
  .button--secondary:hover {
    background-color: var(--color-secondary-hover);
  }

  .button--tertiary {
    background-color: transparent;
    border: 1px solid var(--color-border);
    color: var(--color-text);
  }
  
  .button--tertiary:hover {
    background-color: var(--color-background-alt);
  }

  .button--success {
    background-color: var(--color-success);
    color: white;
  }
  
  .button--success:hover {
    background-color: var(--color-success-hover);
  }

  .button--warning {
    background-color: var(--color-warning);
    color: var(--color-text);
  }
  
  .button--warning:hover {
    background-color: var(--color-warning-hover);
  }

  .button--danger {
    background-color: var(--color-error);
    color: white;
  }
  
  .button--danger:hover {
    background-color: var(--color-error-hover);
  }

  .button--info {
    background-color: var(--color-info);
    color: white;
  }
  
  .button--info:hover {
    background-color: var(--color-info-hover);
  }
  
  .button--link {
    background-color: transparent;
    color: var(--color-primary);
    padding: 0;
    text-decoration: underline;
  }
  
  .button--link:hover {
    color: var(--color-primary-hover);
    text-decoration: none;
  }

  /* Size Modifiers */
  .button--xs {
    font-size: var(--font-size-xs);
    padding-block: var(--space-1);
    padding-inline: var(--space-2);
  }

  .button--sm {
    font-size: var(--font-size-sm);
    padding-block: var(--space-1);
    padding-inline: var(--space-3);
  }
  
  .button--md {
    font-size: var(--font-size-base);
    padding-block: var(--space-2);
    padding-inline: var(--space-4);
  }

  .button--lg {
    font-size: var(--font-size-lg);
    padding-block: var(--space-3);
    padding-inline: var(--space-6);
  }
  
  .button--xl {
    font-size: var(--font-size-xl);
    padding-block: var(--space-4);
    padding-inline: var(--space-8);
  }

  /* Fluid size scaling with container queries */
  .button--fluid {
    --min-padding: 0.5rem;
    --max-padding: 1.5rem;
    --min-font-size: 0.75rem;
    --max-font-size: 1.25rem;
    
    font-size: var(--min-font-size);
    padding-block: var(--min-padding);
    padding-inline: calc(var(--min-padding) * 2);

    /* Only add container query if browser supports it */
    @supports (container-type: inline-size) {
      /* Fluid scaling based on parent container width */
      container-type: inline-size;
      
      /* For small parent containers */
      font-size: var(--min-font-size);
      padding-block: var(--min-padding);
      padding-inline: calc(var(--min-padding) * 2);
      
      /* For medium parent containers */
      @container (min-width: 768px) {
        font-size: clamp(var(--min-font-size), 0.5rem + 2cqi, var(--max-font-size));
        padding-block: clamp(var(--min-padding), 0.25rem + 2cqi, var(--max-padding));
        padding-inline: clamp(calc(var(--min-padding) * 2), 0.5rem + 4cqi, calc(var(--max-padding) * 2));
      }
      
      /* For large parent containers */
      @container (min-width: 1024px) {
        font-size: var(--max-font-size);
        padding-block: var(--max-padding);
        padding-inline: calc(var(--max-padding) * 2);
      }
    }
  }

  /* Disabled state */
  button:disabled,
  .button:disabled {
    cursor: not-allowed;
    opacity: 50%;
    pointer-events: none;
  }

  /* Loading state */
  .button--loading {
    color: transparent !important;
    pointer-events: none;
    position: relative;
  }

  /* With icon */
  .button--with-icon {
    gap: var(--space-2);
  }
  
  & .icon {
    align-items: center;
    display: inline-flex;
    height: 1em;
    justify-content: center;
    width: 1em;
  }

  /* Icon only button */
  .button--icon-only {
    aspect-ratio: 1 / 1;
    padding: var(--space-2);
  }
  
  .button--icon-only & .icon {
    align-items: center;
    display: inline-flex;
    height: 1.25em;
    justify-content: center;
    width: 1.25em;
  }

  /* Loading spinner */
  .button--loading::after {
    animation: spin 0.8s linear infinite;
    border: 2px solid currentColor;
    border-radius: 50%;
    border-top-color: transparent;
    content: "";
    height: 1em;
    left: 50%;
    margin-left: -00.5em;
    margin-top: -00.5em;
    position: absolute;
    top: 50%;
    width: 1em;
  }
}